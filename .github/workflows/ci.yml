name: CI
on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches: [main]
jobs:
  ci:
    name: CI
    needs: [test, fmt, clippy, release]
    runs-on: ubuntu-latest
    steps:
      - name: Done
        run: exit 0

  test:
    name: Tests
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        rust: ["nightly"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@55c7845fad90d0ae8b2e83715cb900e5e861e8cb
        with:
          toolchain: ${{ matrix.rust }}
          components: rustc-dev
      - uses: Swatinem/rust-cache@v1
      - name: Test
        run: cargo test --all-targets --workspace

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@55c7845fad90d0ae8b2e83715cb900e5e861e8cb
        with:
          toolchain: nightly
          components: rustfmt
      - name: rustfmt
        run: cargo fmt -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@55c7845fad90d0ae8b2e83715cb900e5e861e8cb
        with:
          toolchain: nightly
          components: clippy, rustc-dev
      - uses: Swatinem/rust-cache@v1
      - name: Run clippy
        run: cargo clippy -- -D warnings

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, fmt, clippy]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0 # fetch tags for publish
          # ssh-key: "${{ secrets.COMMIT_KEY }}" # use deploy key to trigger workflow on tag
      - uses: dtolnay/rust-toolchain@55c7845fad90d0ae8b2e83715cb900e5e861e8cb
        with:
          toolchain: nightly
          components: rustc-dev
      - uses: Swatinem/rust-cache@v2
      - run: cargo xtask release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
